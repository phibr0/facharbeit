\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{import} \PYG{n+nn}{tensorflow} \PYG{k}{as} \PYG{n+nn}{tf}
\PYG{k+kn}{import} \PYG{n+nn}{tensorflow.keras.layers} \PYG{k}{as} \PYG{n+nn}{layers}

\PYG{n}{numberOfNeuronsInFirstLayer} \PYG{o}{=} \PYG{l+m+mi}{16}
\PYG{n}{numberOfNeuronsInSecondLayer} \PYG{o}{=} \PYG{l+m+mi}{16}
\PYG{n}{numOfEpochs} \PYG{o}{=} \PYG{l+m+mi}{5}

\PYG{n}{mnist} \PYG{o}{=} \PYG{n}{tf}\PYG{o}{.}\PYG{n}{keras}\PYG{o}{.}\PYG{n}{datasets}\PYG{o}{.}\PYG{n}{mnist}

\PYG{p}{(}\PYG{n}{x\PYGZus{}train}\PYG{p}{,} \PYG{n}{y\PYGZus{}train}\PYG{p}{),} \PYG{p}{(}\PYG{n}{x\PYGZus{}test}\PYG{p}{,} \PYG{n}{y\PYGZus{}test}\PYG{p}{)} \PYG{o}{=} \PYG{n}{mnist}\PYG{o}{.}\PYG{n}{load\PYGZus{}data}\PYG{p}{()} \PYG{c+c1}{\PYGZsh{} Laden des MNIST Datasets}
\PYG{c+c1}{\PYGZsh{} Und aufteilen in Trainigsdaten und Testdaten}

\PYG{n}{x\PYGZus{}train} \PYG{o}{=} \PYG{n}{tf}\PYG{o}{.}\PYG{n}{keras}\PYG{o}{.}\PYG{n}{utils}\PYG{o}{.}\PYG{n}{normalize}\PYG{p}{(}\PYG{n}{x\PYGZus{}train}\PYG{p}{,} \PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} Normalisieren des Datasets}
\PYG{n}{x\PYGZus{}test} \PYG{o}{=} \PYG{n}{tf}\PYG{o}{.}\PYG{n}{keras}\PYG{o}{.}\PYG{n}{utils}\PYG{o}{.}\PYG{n}{normalize}\PYG{p}{(}\PYG{n}{x\PYGZus{}test}\PYG{p}{,} \PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}

\PYG{n}{model} \PYG{o}{=} \PYG{n}{tf}\PYG{o}{.}\PYG{n}{keras}\PYG{o}{.}\PYG{n}{models}\PYG{o}{.}\PYG{n}{Sequential}\PYG{p}{()} \PYG{c+c1}{\PYGZsh{} Erstellen des Neuronalen Netzwerks}
\PYG{n}{model}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{layers}\PYG{o}{.}\PYG{n}{Flatten}\PYG{p}{())}
\PYG{n}{model}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{layers}\PYG{o}{.}\PYG{n}{Dense}\PYG{p}{(}\PYG{n}{numberOfNeuronsInFirstLayer}\PYG{p}{,} \PYG{n}{activation}\PYG{o}{=}\PYG{n}{tf}\PYG{o}{.}\PYG{n}{nn}\PYG{o}{.}\PYG{n}{sigmoid}\PYG{p}{))}
\PYG{c+c1}{\PYGZsh{} Hinzufügen der Layer}
\PYG{n}{model}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{layers}\PYG{o}{.}\PYG{n}{Dense}\PYG{p}{(}\PYG{n}{numberOfNeuronsInSecondLayer}\PYG{p}{,} \PYG{n}{activation}\PYG{o}{=}\PYG{n}{tf}\PYG{o}{.}\PYG{n}{nn}\PYG{o}{.}\PYG{n}{sigmoid}\PYG{p}{))}
\PYG{n}{model}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{layers}\PYG{o}{.}\PYG{n}{Dense}\PYG{p}{(}\PYG{l+m+mi}{10}\PYG{p}{,} \PYG{n}{activation}\PYG{o}{=}\PYG{n}{tf}\PYG{o}{.}\PYG{n}{nn}\PYG{o}{.}\PYG{n}{softmax}\PYG{p}{))}

\PYG{n}{model}\PYG{o}{.}\PYG{n}{compile}\PYG{p}{(}\PYG{n}{optimizer}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}adam\PYGZsq{}}\PYG{p}{,}
              \PYG{n}{loss}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}sparse\PYGZus{}categorical\PYGZus{}crossentropy\PYGZsq{}}\PYG{p}{,}
              \PYG{n}{metrics}\PYG{o}{=}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}accuracy\PYGZsq{}}\PYG{p}{])} \PYG{c+c1}{\PYGZsh{} Kompilieren der Layer zu einem trainierfähigen Modell}

\PYG{n}{model}\PYG{o}{.}\PYG{n}{fit}\PYG{p}{(}\PYG{n}{x\PYGZus{}train}\PYG{p}{,} \PYG{n}{y\PYGZus{}train}\PYG{p}{,} \PYG{n}{epochs}\PYG{o}{=}\PYG{n}{numOfEpochs}\PYG{p}{)}
\PYG{c+c1}{\PYGZsh{} Trainieren des Modells mit den Trainingsdaten und x Epochen}

\PYG{n}{model}\PYG{o}{.}\PYG{n}{save}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}beispielModel\PYGZus{}MNIST\PYGZsq{}}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} Speichern des Modells}
\end{Verbatim}
